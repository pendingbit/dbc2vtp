from typing import no_type_check


globalstring = ''

net_header = '''
/* ************************************************************************** */
/*                                                                            */
/*                    Mentor Graphics Corporation                             */
/*                        All rights reserved                                 */
/*                           NBYX Created                                     */
/* ************************************************************************** */
/*                                                                            */
/*  Description:   Network file for Volcano 7.2                               */
/*  ECU:           SCU                                                        */
/*                                                                            */
/* ************************************************************************** */
/*                                                                            */
/*                                                                            */
/* ************************************************************************** */
/*                                                                            */
/* Auto generated by dbcConvertTool.py                                        */
/* ************************************************************************** */

network_file;
volcano version "7.2"; 

'''


def ReceivedFrame(file,dbc,node):
    file.writelines("/*    received frame    */\n")
    for i in range(len(dbc)):
        if 'transmitter' in dbc[i] and (dbc[i]['transmitter'] != node) and (dbc[i]['SendType'] == '0'):
            file.writelines('signal frame '+dbc[i]['message_name']+' {\n    received;\n')
            file.writelines('    frame size '+dbc[i]['message_size']+' bytes;\n    dlc_check_mode strict;\n    endianness bit;\n')

            j = i+1
            while (j < len(dbc)) and ('transmitter' not in dbc[j]):
                file.writelines('    signal '+dbc[j]['signal_name']+'_ {\n')
                size = int(dbc[j]['signal_size'])
                if size == 1:
                    file.writelines('        type boolean;\n')
                    file.writelines('        size 1;\n')
                    file.writelines('        offset '+dbc[j]['start_bit']+' bits;\n')
                elif size <= 32:
                    file.writelines('        type unsigned;\n')
                    file.writelines('        size '+dbc[j]['signal_size']+';\n')
                    file.writelines('        offset '+dbc[j]['start_bit']+' bits;\n')
                elif size%8 == 0:
                    file.writelines('        type byte;\n')
                    file.writelines('        size '+str(round(size/8))+';\n')
                    file.writelines('        offset '+dbc[j]['start_bit']+' bits;\n')
                else:
                    print("THE SIGNAL SIZE IS ERROR, PLEASE CHECK IT!!!")
                file.writelines('    }\n')

                j += 1

            file.writelines('}\n\n')
    pass

def TransmitFrame(file,dbc,node):
    file.writelines("/*   transmit frame    */\n")
    for i in range(len(dbc)):
        if 'transmitter' in dbc[i] and (dbc[i]['transmitter'] == node) and (dbc[i]['SendType'] == '0' or dbc[i]['SendType'] == '1'):
            file.writelines('signal frame '+dbc[i]['message_name']+' {\n')
            if dbc[i]['SendType'] == '0':
                file.writelines('    periodic transmit;\n')
            elif dbc[i]['SendType'] == '1':
                file.writelines('    sporadic transmit;\n')

            file.writelines('    frame size '+dbc[i]['message_size']+' bytes;\n')
            file.writelines('    endianness big;\n')

            j = i+1
            while (j < len(dbc)) and ('transmitter' not in dbc[j]):
                file.writelines('    signal '+dbc[j]['signal_name']+'_ {\n')
                size = int(dbc[j]['signal_size'])
                if size == 1:
                    file.writelines('        type boolean;\n')
                    file.writelines('        size 1;\n')
                    file.writelines('        offset '+dbc[j]['start_bit']+' bits;\n')
                elif size <= 32:
                    file.writelines('        type unsigned;\n')
                    file.writelines('        size '+dbc[j]['signal_size']+';\n')
                    file.writelines('        offset '+dbc[j]['start_bit']+' bits;\n')
                elif size%8 == 0:
                    file.writelines('        type byte;\n')
                    file.writelines('        size '+str(round(size/8))+';\n')
                    file.writelines('        offset '+dbc[j]['start_bit']+' bits;\n')
                else:
                    print("THE SIGNAL SIZE IS ERROR, PLEASE CHECK IT!!!")
                file.writelines('    }\n')

                j += 1

            file.writelines('}\n\n')

def ImmediateFrame(file,dbc,node):
    file.writelines("/*   immediate frame    */\n")
    for i in range(len(dbc)):
        if ('transmitter' in dbc[i]) and (dbc[i]['SendType'] == '5'):
            file.writelines('immediate frame'+dbc[i]['message_name']+' {\n')
            file.writelines('    frame size '+dbc[i]['message_size']+' bytes;\n    dlc_check_mode strict;\n    endianness bit;\n')

            j = i+1
            while (j < len(dbc)) and ('transmitter' not in dbc[j]):
                file.writelines('    signal '+dbc[j]['signal_name']+'_ {\n')
                file.writelines('        offset 0 bits;\n    }\n')
                j += 1

            file.writelines('}\n\n')

def FrameMode(file,dbc,node):
    file.writelines('/*   frame mode    */\nframe mode FM_NORMAL_CAN1 {\n')
    file.writelines('    /* RX Frames   */\n')
    for i in range(len(dbc)):
        if ('transmitter' in dbc[i]) and (dbc[i]['transmitter'] != node):
            file.writelines('    carries frame '+dbc[i]['message_name']+';\n')
    file.writelines('   /* TX Frames    */\n')
    for i in range(len(dbc)):
        if ('transmitter' in dbc[i]) and (dbc[i]['transmitter'] == node):
            file.writelines('    carries frame '+dbc[i]['message_name']+';\n')
    file.writelines('    periodic {\n')       
    for i in range(len(dbc)):
        if ('transmitter' in dbc[i]) and (dbc[i]['transmitter'] == node) and (dbc[i]['SendType'] == '0'):
            file.writelines('        frame '+dbc[i]['message_name']+' every '+dbc[i]['CycleTime']+' ms offset 0 us;\n')
    file.writelines('    }\n')
    file.writelines('}\n\n')

    file.writelines('frame mode FM_Quiet_CAN1 {\n')
    for i in range(len(dbc)):
        if ('transmitter' in dbc[i]) and (dbc[i]['SendType'] == '5'):
            file.writelines('    carries frame '+dbc[i]['message_name']+';\n')
    file.writelines('    periodic {\n    }\n')
    
    file.writelines('}\n\n')

    file.writelines('frame mode FM_Silent_CAN1 {\n')
    for i in range(len(dbc)):
        if ('transmitter' in dbc[i]) and (dbc[i]['SendType'] == '5'):
            file.writelines('    carries frame '+dbc[i]['message_name']+';\n')
    file.writelines('    periodic {\n    }\n')
    
    file.writelines('}\n\n')


def InterfaceDefine(file,dbc,node):
    file.writelines('/* Interface   */\n')
    file.writelines(
'''
network interface SCU_CAN1 {
    protocol CAN11 {
	priority_bits 11;
	filter_bits 0;
	prescale 2;
	prop_seg 3;
	phase_seg1 2;
	phase_seg2 2;
	sjw 2;
	nsamples = 1;
	interest_mask "xxxxxxxxxxx" if_required;
''')
    for i in range(len(dbc)):
        if 'transmitter' in dbc[i]:
            file.writelines('    frame '+dbc[i]['message_name']+' size '+dbc[i]['message_size']+ ' ID '+str(hex(int(dbc[i]['message_id'])))+';\n')
    file.writelines('    platform TRANSPORT_OPTIONAL {\n        }//transport\n    }//protocol\n')   
    file.writelines('}//interface\n\n')

def SignalMap(file,dbc,node):
    file.writelines('/*    Signal Mappings    */\n')
    for i in range(len(dbc)):
        if 'transmitter' in dbc[i]:
            if (dbc[i]['transmitter'] == node) and (dbc[i]['SendType'] != '5'):
                j = i+1
                while (j < len(dbc)) and ('transmitter' not in dbc[j]) :
                    file.writelines('    map signal from application '+dbc[j]['signal_name']+' to '+dbc[j]['signal_name']+'_;\n')
                    j += 1
            elif dbc[i]['transmitter'] != node:
                j = i+1
                while (j < len(dbc)) and ('transmitter' not in dbc[j]):
                    file.writelines('    map signal from '+dbc[j]['signal_name']+'_ to application '+dbc[j]['signal_name']+';\n')
                    j += 1
    file.writelines('\n')
            


def InitializeValue(file,dbc,node):
    file.writelines('/*    Initialize Value    */\n')
    for i in range(len(dbc)):
        if 'transmitter' in dbc[i] and (dbc[i]['transmitter']==node) and (dbc[i]['SendType'] == '0'):
            j = i+1
            while (j < len(dbc)) and ('transmitter' not in dbc[j]):
                file.writelines('    initial value '+dbc[j]['signal_name']+' = 0;\n')
                j += 1


##########################################

def CreateNet(dbclist,node):
    netfile = open("target.net", "w+")
    netfile.writelines(net_header)
    
    #接受报文
    ReceivedFrame(netfile,dbclist,node)

    #发送报文
    TransmitFrame(netfile,dbclist,node)

    #立即帧
    ImmediateFrame(netfile,dbclist,node)

    #报文模式
    FrameMode(netfile,dbclist,node)

    #接口定义
    InterfaceDefine(netfile,dbclist,node)

    #信号映射
    SignalMap(netfile,dbclist,node)

    #信号初始值
    InitializeValue(netfile,dbclist,node)

    netfile.flush()
    netfile.close()

    return

